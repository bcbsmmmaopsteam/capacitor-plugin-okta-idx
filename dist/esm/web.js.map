{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAE5C,OAAO,EAAE,QAAQ,EAAE,MAAM,oBAAoB,CAAC;AAI9C,MAAM,OAAO,aAAc,SAAQ,SAAS;IAE1C,WAAW,CAAC,IAAS;QAEnB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,MAAM,UAAU,GAAG,IAAI,QAAQ,CAAC;gBAC9B,MAAM,EAAE,IAAI,CAAC,MAAM;gBACnB,QAAQ,EAAE,IAAI,CAAC,QAAQ;gBACvB,WAAW,EAAE,IAAI,CAAC,WAAW;gBAC7B,MAAM,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC;aACjC,CAAC,CAAC;YAEH,MAAM,QAAQ,GAAW,IAAI,CAAC,QAAQ,CAAC;YACvC,MAAM,QAAQ,GAAW,IAAI,CAAC,QAAQ,CAAC;YAEvC,CAAC,KAAK,IAAI,EAAE;;gBACV,MAAM,UAAU,CAAC,GAAG,CAAC,oBAAoB,EAAE,CAAC;gBAC5C,MAAM,SAAS,GAAmB,MAAM,UAAU,CAAC,GAAG,CAAC,YAAY,CAAC;oBAClE,QAAQ;oBACR,QAAQ;iBACT,CAAC,CAAA;gBAEF,IAAI,SAAS,CAAC,MAAM,KAAK,SAAS,EAAE;oBAClC,MAAM,aAAa,GAAG;wBACpB,YAAY,cAAE,SAAS,CAAC,MAAM,0CAAE,WAAW,0CAAE,WAAW;wBACxD,aAAa,cAAE,SAAS,CAAC,MAAM,0CAAE,YAAY,0CAAE,YAAY;wBAC3D,KAAK,cAAE,SAAS,CAAC,MAAM,0CAAE,WAAW,0CAAE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;wBACtD,QAAQ,cAAE,SAAS,CAAC,MAAM,0CAAE,OAAO,0CAAE,OAAO;wBAC5C,UAAU,cAAE,SAAS,CAAC,MAAM,0CAAE,WAAW,0CAAE,SAAS;wBACpD,UAAU,cAAE,SAAS,CAAC,MAAM,0CAAE,WAAW,0CAAE,SAAS;qBACrD,CAAA;oBACD,OAAO,CAAC,aAAa,CAAC,CAAC;iBACxB;qBAAK;oBACJ,MAAM,EAAE,CAAC;iBACV;YACH,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;gBACf,MAAM,CAAC,GAAG,CAAC,CAAC;YACd,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAA;IACJ,CAAC;IAED,YAAY,CAAC,IAAS;QACpB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YAC7B,OAAO,CAAC,IAAI,CAAC,CAAC;QAChB,CAAC,CAAC,CAAA;IACJ,CAAC;CACF","sourcesContent":["import { WebPlugin } from '@capacitor/core';\nimport type { IdxTransaction } from '@okta/okta-auth-js';\nimport { OktaAuth } from '@okta/okta-auth-js';\n\nimport type { CapOktaIdxPlugin } from './definitions';\n\nexport class CapOktaIdxWeb extends WebPlugin implements CapOktaIdxPlugin {\n\n  fetchTokens(data: any): Promise<any> {\n\n    return new Promise((resolve, reject) => {\n      const authClient = new OktaAuth({\n        issuer: data.issuer,\n        clientId: data.clientId,\n        redirectUri: data.redirectUri,\n        scopes: (data.scopes).split(' '),\n      });\n  \n      const username: string = data.username;\n      const password: string = data.password;\n  \n      (async () => { \n        await authClient.idx.clearTransactionMeta();\n        const authToken: IdxTransaction = await authClient.idx.authenticate({\n          username,\n          password\n        })\n    \n        if (authToken.status === 'SUCCESS') {\n          const tokenResponse = {\n            access_token: authToken.tokens?.accessToken?.accessToken,\n            refresh_token: authToken.tokens?.refreshToken?.refreshToken,\n            scope: authToken.tokens?.accessToken?.scopes.join(' '),\n            id_token: authToken.tokens?.idToken?.idToken,\n            token_type: authToken.tokens?.accessToken?.tokenType,\n            expires_in: authToken.tokens?.accessToken?.expiresAt\n          }\n          resolve(tokenResponse);\n        }else {\n          reject();\n        }\n      })().catch(err => {\n        reject(err);\n      });\n    })\n  }\n\n  refreshToken(data: any): Promise<any> {\n    return new Promise((resolve) => {\n      resolve(data);\n    })\n  }\n}\n"]}