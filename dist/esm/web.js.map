{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"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","sourcesContent":["import { WebPlugin } from '@capacitor/core';\nimport type { IdxTransaction } from '@okta/okta-auth-js';\nimport { IdxStatus , OktaAuth } from '@okta/okta-auth-js';\n\nimport type { CapOktaIdxPlugin } from './definitions';\n\nexport class CapOktaIdxWeb extends WebPlugin implements CapOktaIdxPlugin {\n\n  fetchTokens(data: any): Promise<any> {\n\n    // window.sessionStorage.clear();\n    // window.localStorage.clear();\n\n    return new Promise((resolve, reject) => {\n      const authClient = new OktaAuth({\n        issuer: data.issuer,\n        clientId: data.clientId,\n        redirectUri: data.redirectUri,\n        scopes: (data.scopes).split(' '),\n      });\n  \n      (async () => { \n        // authClient.clearStorage();\n        // authClient.idx.clearTransactionMeta();\n        // authClient.tokenManager.clear();\n        // authClient.transactionManager.clear();\n        const authToken: IdxTransaction = await authClient.idx.startTransaction();\n    \n        if (authToken.status === IdxStatus.SUCCESS) {\n          const tokenResponse = {\n            access_token: authToken.tokens?.accessToken?.accessToken,\n            refresh_token: authToken.tokens?.refreshToken?.refreshToken,\n            scope: authToken.tokens?.accessToken?.scopes.join(' '),\n            id_token: authToken.tokens?.idToken?.idToken,\n            token_type: authToken.tokens?.accessToken?.tokenType,\n            expires_in: authToken.tokens?.accessToken?.expiresAt\n          }\n          resolve(tokenResponse);\n        }else if (authToken.status === IdxStatus.PENDING) {\n          await this.proceed(authToken, authClient, data, resolve, reject);\n        } {\n          reject();\n        }\n      })().catch(err => {\n        reject(err);\n      });\n    })\n  }\n\n  async proceed(authToken: any, authClient: OktaAuth, data: any, resolve: any, reject: any): Promise<void> {\n    const username: string = data.username;\n    const password: string = data.password;\n    if (authToken?.messages?.length > 0) {\n      reject({message: authToken.messages[0].message});\n    }else if (authToken?.nextStep?.name == 'identify' && authToken?.nextStep?.inputs && authToken?.nextStep?.inputs?.length > 0) {\n      if (authToken.nextStep.inputs[0].name === 'username') {\n        authToken = await authClient.idx.proceed({[authToken.nextStep.inputs[0].name]: username});\n      }\n    } else if (authToken?.nextStep?.name == 'challenge-authenticator' && authToken?.nextStep?.inputs && authToken?.nextStep?.inputs?.length > 0) {\n        if (authToken.nextStep.inputs[0].name === 'password') {\n          authToken = await authClient.idx.proceed({[authToken.nextStep.inputs[0].name]: password});\n        }\n    }\n\n    if (authToken.status === IdxStatus.PENDING) {\n        await this.proceed(authToken, authClient, data, resolve, reject);\n    }else if (authToken.status === IdxStatus.SUCCESS) {\n      const tokenResponse = {\n        access_token: authToken.tokens?.accessToken?.accessToken,\n        refresh_token: authToken.tokens?.refreshToken?.refreshToken,\n        scope: authToken.tokens?.accessToken?.scopes.join(' '),\n        id_token: authToken.tokens?.idToken?.idToken,\n        token_type: authToken.tokens?.accessToken?.tokenType,\n        expires_in: authToken.tokens?.accessToken?.expiresAt\n      }\n      resolve(tokenResponse);\n    }\n  }\n\n  refreshToken(data: any): Promise<any> {\n    return new Promise((resolve) => {\n      resolve(data);\n    })\n  }\n}\n"]}